package simpleSqlParser

type SQL Peg {
	sType 
	SelectStatement
	InsertStatement
	CreateStatement
	DropStatement
	DeleteStatement
}

G <- SelectStatement / InsertStatement / CreateStatement / DropStatement / DeleteStatement !. 


DropStatement <- _  "DROP" _  DropTable _ ";"_

# Select
SelectStatement <- _  "SELECT" _ Columns _ "FROM" _ SelectTable _ WHERESELECT* _ LIMIT* _ ";" _  

#Delete
DeleteStatement <- "DELETE" _ "FROM" _ DeleteTable _ WHEREDELETE _ ";" _

#Insert
InsertStatement <-   _ "INSERT" _ "INTO" _ InsertBody     { p.validateInsert() }

# Create
CreateStatement <- _ "CREATE" _  "Table" _ CreateTable _ CreateParaColList _ ';' { p.setPartitionKey(buffer[begin:end])}

# Columns defn
Columns  <-  SelectParaColList / SelectColList / Asterisk  
SelectParaColList <- '(' _ SelectColList  _ ')'
SelectColList <- (SelectColName _  ',' _  )* SelectColName
SelectColName <- < AlphaNum+ > { p.SelectStatement.Columns = append(p.SelectStatement.Columns, buffer[begin:end]) }

InsertParaColList <- '(' _ InsertColList  _ ')'
InsertColList <- (_ InsertColName _  ',' _  )* InsertColName
InsertColName <- < AlphaNum+ > { p.InsertStatement.Columns = append(p.InsertStatement.Columns,buffer[begin:end]) }

CreateParaColList <- '(' _ CreateColList _  ')'
CreateColList <- ( _ CreateColName _ ',' _  )* CreateColName
CreateColName <- < AlphaNum+ > { p.CreateStatement.Columns = append(p.CreateStatement.Columns, buffer[begin:end]) }

# Insert Body
InsertBody <-   InsertTable  _ Values _ ";"   

# Values defn
Values <- InsertParaColList? _ "VALUES" _ ValuesBody

# ValuesBody defn
ValuesBody <- '(' _ ValList  _ ')'

ValList <- ( _ InsertValue _ ',' _  )* _ InsertValue
InsertValue <- '"'? EachValue '"'?
EachValue <- <   AlphaNum+  > { p.captureValues(buffer[begin:end]) }

# Symbols
Asterisk <- '*' { p.SelectStatement.AllColumns = true }


# Comments and whitespace
lineComment  <- '//' (!'\n' .)*
blockComment <- '/*' (!'*/' (. / '\n'))* '*/'
ws           <- [ \t\n\r]
_            <- (ws / lineComment / blockComment)*


# Numbers and letters
Letter   <- [a-zA-Z_]
Number   <- [0-9] ('.' [0-9])*
AlphaNum <- (Letter / Number)

# Table defn
SelectTable <- SelectKeyspace "." SelectTableName
SelectKeyspace <- < AlphaNum+ > {p.SelectStatement.Keyspace = buffer[begin:end] }
SelectTableName <-  < AlphaNum+ >  { p.SelectStatement.TableName = buffer[begin:end] }

InsertTable <- InsertKeyspace "." InsertTableName
InsertKeyspace <- < AlphaNum+ > { p.InsertStatement.Keyspace = buffer[begin:end] }
InsertTableName <- < AlphaNum+ > { p.InsertStatement.TableName = buffer[begin:end] }

CreateTable <- CreateKeyspace "." CreateTableName
CreateKeyspace <- < AlphaNum+ > { p.CreateStatement.Keyspace =buffer[begin:end] }
CreateTableName <- < AlphaNum+ > { p.CreateStatement.TableName = buffer[begin:end] }

DropTable <- DropTableKeyspace "." DropTableName
DropTableKeyspace <- < AlphaNum+ > { p.DropStatement.Keyspace = buffer[begin:end] }
DropTableName <- < AlphaNum+ > {p.DropStatement.TableName = buffer[begin:end] }

DeleteTable <- DeleteKeyspace "." DeleteTableName
DeleteKeyspace <- < AlphaNum+ > {p.DeleteStatement.Keyspace = buffer[begin:end] }
DeleteTableName <-  < AlphaNum+ >  { p.DeleteStatement.TableName = buffer[begin:end] }

#WHERESELECT defn
WHERESELECT <- "WHERE" _  SELECTFILTERS+ 
SELECTFILTERS <- (SELECTFILTER _  "and" )* SELECTFILTER
SELECTFILTER <- _ SelectFilterColumn _ SelectOperation _ SelectFilterValue _ 

SelectOperation <- SelectEquality / SelectLessThan / SelectGreaterThan

SelectEquality <- < "=" > { p.SelectStatement.Operators= append(p.SelectStatement.Operators, buffer[begin:end]) }
SelectLessThan <- < "<" "="? >{ p.SelectStatement.Operators= append(p.SelectStatement.Operators, buffer[begin:end]) }
SelectGreaterThan <- < ">" "="? > { p.SelectStatement.Operators= append(p.SelectStatement.Operators, buffer[begin:end]) }


SelectFilterColumn <- < AlphaNum+ >  { p.SelectStatement.WhereColumns = append(p.SelectStatement.WhereColumns, buffer[begin:end])  }
SelectFilterValue  <-  < AlphaNum+ > { p.SelectStatement.WhereValues = append(p.SelectStatement.WhereValues, buffer[begin:end]) }


#WHEREDELETE defn
WHEREDELETE <- "WHERE" _  DELETEFILTERS+ 
DELETEFILTERS <- (DELETEFILTER _  "and" )* DELETEFILTER
DELETEFILTER <- _ DeleteFilterColumn _ DeleteOperation _ DeleteFilterValue _ 

DeleteOperation <- DeleteEquality / DeleteLessThan / DeleteGreaterThan

DeleteEquality <- < "=" > { p.DeleteStatement.Operators= append(p.DeleteStatement.Operators, buffer[begin:end]) }
DeleteLessThan <- < "<" "="? >{ p.DeleteStatement.Operators= append(p.DeleteStatement.Operators, buffer[begin:end]) }
DeleteGreaterThan <- < ">" "="? > { p.DeleteStatement.Operators= append(p.DeleteStatement.Operators, buffer[begin:end]) }


DeleteFilterColumn <- < AlphaNum+ >  { p.DeleteStatement.WhereColumns = append(p.DeleteStatement.WhereColumns, buffer[begin:end])  }
DeleteFilterValue  <-  < AlphaNum+ > { p.DeleteStatement.WhereValues = append(p.DeleteStatement.WhereValues, buffer[begin:end]) }


#LIMIT Defn
LIMIT <- "LIMIT" _ LimitVal
LimitVal <- < Number+ > { var err error;  p.SelectStatement.Limit,err = strconv.Atoi(buffer[begin:end]); if err!=nil{ p.SelectStatement.Limit = -1  };   }
