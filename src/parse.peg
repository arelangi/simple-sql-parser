package main

type SQL Peg {
	Expression
}

G <- SelectStatement / InsertStatement !. { fmt.Println("I should be first")}


# Columns defn
Columns  <-  ParaColList / ColList / Asterisk  
ParaColList <- '(' _ ColList _ ')'
ColList <- (ColName _  ',' _  )* ColName
ColName <- < AlphaNum+ > { p.captureColumns(buffer[begin:end])  }



# Select
SelectStatement <-  "SELECT"_ Columns _ "FROM" _ Table _";"  { p.captureType(buffer[begin:end]); fmt.Println("Is this second?") }


#Insert
InsertStatement <-  < "INSERT" _ "INTO" _ InsertBody >    { p.captureType(buffer[begin:end]) ; fmt.Println("Is this the second one?");  }




# Insert Body
InsertBody <- <  Table  _ Values _ ";"  > { fmt.Println("Bro "); p.captureType("INSERT"); fmt.Println("Bro");   }

# Values defn
Values <- ParaColList? _ "VALUES" _ ValuesBody

# ValuesBody defn
ValuesBody <- '(' _ ValList  _ ')'

ValList <- ( _ InsertValue _ ',' _  )* _ InsertValue
InsertValue <- '"'? EachValue '"'?
EachValue <- <   AlphaNum+  > { p.captureValues(buffer[begin:end]) }



# Symbols
Asterisk <- '*' { p.SelectStatement.AllColumns = true }


# Comments and whitespace
lineComment  <- '//' (!'\n' .)*
blockComment <- '/*' (!'*/' (. / '\n'))* '*/'
ws           <- [ \t\n\r]
_            <- (ws / lineComment / blockComment)*


# Numbers and letters
Letter   <- [a-zA-Z_]
Number   <- [0-9] '.'? [0-9]*
AlphaNum <- (Letter / Number)

# Table defn
Table <- < AlphaNum+ > { fmt.Println(p.Expression.sType," This is the type I think");  p.captureTableName(buffer[begin:end]) }


